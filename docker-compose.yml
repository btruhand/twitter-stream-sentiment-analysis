version: "2.4"
services:
  streaming-web:
    build:
      context: .
      dockerfile: ./docker/Dockerfile-server
    image: bigdata-project-tornado:latest
    ports:
      - "80:10080"
    networks:
      - web_rabbitmq

  rabbitmq1:
    build:
      context: .
      dockerfile: ./docker/Dockerfile-rabbitmq
    image: bigdata-project-mq:latest
    networks:
      - web_rabbitmq
      - backend_rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    expose:
      - "4369"
      - "5672"
      - "25672"
    hostname: rabbitmq1
    env_file:
      - ./rabbitmq/.env
    volumes:
      - rabbitmq_data_1:/var/lib/rabbitmq
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
      - ./rabbitmq/definitions.json:/etc/rabbitmq/definitions.json # this makes some things easier, some things harder
      # would not do it in a production setting, but here it is just to ease things up
    healthcheck:
      test: ["CMD", "./tmp/wait-for-it.sh", "localhost:5672", "-t", "10"]
      interval: 30s
      retries: 3
      start_period: 45s
    restart: on-failure
    mem_limit: 150M

  rabbitmq2:
    image: bigdata-project-mq:latest
    # image: rabbitmq:3.7-management
    networks:
      - web_rabbitmq
      - backend_rabbitmq
    expose:
      - "5672"
    hostname: rabbitmq2
    env_file:
      - ./rabbitmq/.env
    volumes:
      - rabbitmq_data_2:/var/lib/rabbitmq
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
      - ./rabbitmq/definitions.json:/etc/rabbitmq/definitions.json
    depends_on:
      rabbitmq1:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "./tmp/wait-for-it.sh", "localhost:5672", "-t", "10"]
      interval: 30s
      retries: 1
      start_period: 45s
    restart: on-failure
    mem_limit: 150M

  streamer:
    build:
      context: .
      dockerfile: ./docker/Dockerfile-streaming
    image: streaming-worker:latest
    networks:
      - backend_rabbitmq
    expose:
      - "9999"
    depends_on:
      rabbitmq1:
        condition: service_healthy
      rabbitmq2:
        condition: service_healthy
    cpus: 2.0
    scale: 4

  zookeeper:
    image: bitnami/zookeeper:latest
    expose:
      - "2181"
    networks:
      - kafka_cluster
    environment:
      - ZOO_ENABLE_AUTH=yes
      - ZOO_SERVER_USERS=kafka
      - ZOO_SERVER_PASSWORDS=zookafka
    volumes:
      - zookeeper_data:/bitnami/zookeeper
  kafka1:
    image: bitnami/kafka:1.1.1-r70
    expose:
      - "9092"
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_ZOOKEEPER_USER=kafka
      - KAFKA_ZOOKEEPER_PASSWORD=zookafka
      - KAFKA_INTER_BROKER_USER=kafka_cluster
      - KAFKA_INTER_BROKER_PASSWORD=kafkacluster
      - KAFKA_BROKER_USER=kafka_user
      - KAFKA_BROKER_PASSWORD=usekafka
      - KAFKA_DELETE_TOPIC_ENABLE=true
      - KAFKA_BROKER_ID=1
    networks:
      - kafka_cluster
    depends_on:
      - zookeeper
    volumes:
      - kafka_data_1:/bitnami/kafka
  kafka2:
    image: bitnami/kafka:1.1.1-r70
    expose:
      - "9092"
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_ZOOKEEPER_USER=kafka
      - KAFKA_ZOOKEEPER_PASSWORD=zookafka
      - KAFKA_INTER_BROKER_USER=kafka_cluster
      - KAFKA_INTER_BROKER_PASSWORD=kafkacluster
      - KAFKA_BROKER_USER=kafka_user
      - KAFKA_BROKER_PASSWORD=usekafka
      - KAFKA_DELETE_TOPIC_ENABLE=true
      - KAFKA_BROKER_ID=2
    networks:
      - kafka_cluster
    depends_on:
      - zookeeper
    volumes:
      - kafka_data_2:/bitnami/kafka

networks:
  web_rabbitmq:
    driver: bridge
    name: bigdata-project-web-rabbitmq
  backend_rabbitmq:
    driver: bridge
    name: bigdata-project-backend-rabbitmq
  kafka_cluster:
    driver: bridge
    name: bigdata-project-kafka-cluster

volumes:
  rabbitmq_data_1:
    name: bigdata-project-rabbitmq-data-1
  rabbitmq_data_2:
    name: bigdata-project-rabbitmq-data-2
  rabbitmq_data_3:
    name: bigdata-project-rabbitmq-data-3
  zookeeper_data:
    name: bigdata-project-zookeeper-data
  kafka_data_1:
    name: bigdata-project-kafka-data-1
  kafka_data_2:
    name: bigdata-project-kafka-data-2